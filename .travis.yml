# This file has been generated -- see https://github.com/hvr/multi-ghc-travis
language: c
sudo: false

cache:
  directories:
    - $HOME/.cabsnap
    - $HOME/.cabal/packages

before_cache:
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/build-reports.log
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/00-index.tar

matrix:
  include:
    - env: CABALVER=1.18 GHCVER=7.8.1
      compiler: ": #GHC 7.8.1"
      addons: {apt: {packages: [cabal-install-1.18,ghc-7.8.1], sources: [hvr-ghc]}}
    - env: CABALVER=1.18 GHCVER=7.8.2
      compiler: ": #GHC 7.8.2"
      addons: {apt: {packages: [cabal-install-1.18,ghc-7.8.2], sources: [hvr-ghc]}}
    - env: CABALVER=1.18 GHCVER=7.8.3
      compiler: ": #GHC 7.8.3"
      addons: {apt: {packages: [cabal-install-1.18,ghc-7.8.3], sources: [hvr-ghc]}}
    - env: CABALVER=1.18 GHCVER=7.8.4
      compiler: ": #GHC 7.8.4"
      addons: {apt: {packages: [cabal-install-1.18,ghc-7.8.4], sources: [hvr-ghc]}}
    - env: CABALVER=1.22 GHCVER=7.10.1
      compiler: ": #GHC 7.10.1"
      addons: {apt: {packages: [cabal-install-1.22,ghc-7.10.1], sources: [hvr-ghc]}}
    - env: CABALVER=1.22 GHCVER=7.10.2
      compiler: ": #GHC 7.10.2"
      addons: {apt: {packages: [cabal-install-1.22,ghc-7.10.2], sources: [hvr-ghc]}}
    - env: CABALVER=1.22 GHCVER=7.10.3
      compiler: ": #GHC 7.10.3"
      addons: {apt: {packages: [cabal-install-1.22,ghc-7.10.3], sources: [hvr-ghc]}}
    - env: CABALVER=head GHCVER=head
      compiler: ": #GHC head"
      addons: {apt: {packages: [cabal-install-head,ghc-head], sources: [hvr-ghc]}}

  allow_failures:
    - env: CABALVER=head GHCVER=head

before_install:
 - unset CC
 - export PATH=/opt/ghc/$GHCVER/bin:/opt/cabal/$CABALVER/bin:$PATH

install:
 - cabal --version
 - echo "$(ghc --version) [$(ghc --print-project-git-commit-id 2> /dev/null || echo '?')]"
 - if [ -f $HOME/.cabal/packages/hackage.haskell.org/00-index.tar.gz ];
   then
     zcat $HOME/.cabal/packages/hackage.haskell.org/00-index.tar.gz >
          $HOME/.cabal/packages/hackage.haskell.org/00-index.tar;
   fi
 - travis_retry cabal update -v
 - sed -i 's/^jobs:/-- jobs:/' ${HOME}/.cabal/config
 - cd ./file-modules && cabal install --only-dependencies --enable-tests --enable-benchmarks --dry -v > installplan.txt
 - cd ./extract-dependencies && cabal install --only-dependencies --enable-tests --enable-benchmarks --dry -v > installplan.txt
 - cd ./package-description-remote && cabal install --only-dependencies --enable-tests --enable-benchmarks --dry -v > installplan.txt
 - cd ./stack-run-auto && cabal install --only-dependencies --enable-tests --enable-benchmarks --dry -v > installplan.txt
 - sed -i -e '1,/^Resolving /d' installplan.txt; cat installplan.txt

# check whether current requested install-plan matches cached package-db snapshot
 - if diff -u installplan.txt $HOME/.cabsnap/installplan.txt;
   then
     echo "cabal build-cache HIT";
     rm -rfv .ghc;
     cp -a $HOME/.cabsnap/ghc $HOME/.ghc;
     cp -a $HOME/.cabsnap/lib $HOME/.cabsnap/share $HOME/.cabsnap/bin $HOME/.cabal/;
   else
     echo "cabal build-cache MISS";
     rm -rf $HOME/.cabsnap;
     mkdir -p $HOME/.ghc $HOME/.cabal/lib $HOME/.cabal/share $HOME/.cabal/bin;
     cd ./file-modules && cabal install --only-dependencies --enable-tests --enable-benchmarks --dry -v > installplan.txt
     cd ..
     cd ./extract-dependencies && cabal install --only-dependencies --enable-tests --enable-benchmarks --dry -v > installplan.txt
     cd ..
     cd ./package-description-remote && cabal install --only-dependencies --enable-tests --enable-benchmarks --dry -v > installplan.txt
     cd ..
     cd ./stack-run-auto && cabal install --only-dependencies --enable-tests --enable-benchmarks --dry -v > installplan.txt
     cd ..
   fi

# snapshot package-db on cache miss
 - if [ ! -d $HOME/.cabsnap ];
   then
      echo "snapshotting package-db to build-cache";
      mkdir $HOME/.cabsnap;
      cp -a $HOME/.ghc $HOME/.cabsnap/ghc;
      cp -a $HOME/.cabal/lib $HOME/.cabal/share $HOME/.cabal/bin installplan.txt $HOME/.cabsnap/;
   fi

# Here starts the actual work to be performed for the package under test;
# any command which exits with a non-zero exit code causes the build to fail.
script:
 - cd extract-dependencies && if [ -f configure.ac ]; then autoreconf -i; fi
 - cd extract-dependencies && cabal configure --enable-tests --enable-benchmarks -v2  # -v2 provides useful information for debugging
 - cd extract-dependencies && cabal build   # this builds all libraries and executables (including tests/benchmarks)
 - cd extract-dependencies && cabal test
 - cd extract-dependencies && cabal check
 - cd extract-dependencies && cabal sdist   # tests that a source-distribution can be generated
 - cd package-description-remote && if [ -f configure.ac ]; then autoreconf -i; fi
 - cd package-description-remote && cabal configure --enable-tests --enable-benchmarks -v2  # -v2 provides useful information for debugging
 - cd package-description-remote && cabal build   # this builds all libraries and executables (including tests/benchmarks)
 - cd package-description-remote && cabal test
 - cd package-description-remote && cabal check
 - cd package-description-remote && cabal sdist   # tests that a source-distribution can be generated
 - cd stack-run-auto && if [ -f configure.ac ]; then autoreconf -i; fi
 - cd stack-run-auto && cabal configure --enable-tests --enable-benchmarks -v2  # -v2 provides useful information for debugging
 - cd stack-run-auto && cabal build   # this builds all libraries and executables (including tests/benchmarks)
 - cd stack-run-auto && cabal test
 - cd stack-run-auto && cabal check
 - cd stack-run-auto && cabal sdist   # tests that a source-distribution can be generated
 - cd file-modules && if [ -f configure.ac ]; then autoreconf -i; fi
 - cd file-modules && cabal configure --enable-tests --enable-benchmarks -v2  # -v2 provides useful information for debugging
 - cd file-modules && cabal build   # this builds all libraries and executables (including tests/benchmarks)
 - cd file-modules && cabal test
 - cd file-modules && cabal check
 - cd file-modules && cabal sdist   # tests that a source-distribution can be generated

# Check that the resulting source distribution can be built & installed.
# If there are no other `.tar.gz` files in `dist`, this can be even simpler:
# `cabal install --force-reinstalls dist/*-*.tar.gz`
 - SRC_TGZ=$(cabal info . | awk '{print $2;exit}').tar.gz &&
   (cd dist && cabal install --force-reinstalls "$SRC_TGZ")

# EOF
